const express = require('express');
const app = express();
const port = 3000;

// PÃ«rdor middleware pÃ«r tÃ« parsuar JSON body nÃ« kÃ«rkesa
app.use(express.json());

// Importo librarinÃ« e Supabase
const { createClient } = require('@supabase/supabase-js');

// Konfigurimi i lidhjes me Supabase (pÃ«rdor kredencialet e tua)
const supabaseUrl = 'https://utmlvyxtgnozphpiunfy.supabase.co'; // URL e projektit tÃ«nd Supabase
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV0bWx2eXh0Z25venBocGl1bmZ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwMTAxNjUsImV4cCI6MjA1OTU4NjE2NX0.q9me0DEC9y9pYlxfsXz1AnHMhU4QcAbKVW-OgklDSV4'; // Ã‡elÃ«si publik (anon) i projektit tÃ«nd
const supabase = createClient(supabaseUrl, supabaseKey);

// --- Endpoint-et e API-t tÃ« integruara me Supabase ---

// GET /api/products - Merr tÃ« gjitha produktet nga Supabase
app.get('/api/products', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('products') // ZÃ«vendÃ«so 'products' me emrin e saktÃ« tÃ« tabelÃ«s tÃ«nde nÃ« Supabase
      .select('*'); // Merr tÃ« gjitha kolonat

    if (error) {
      // NÃ«se ka gabim nga Supabase, kthe error 500
      console.error('Supabase error (GET all):', error);
      return res.status(500).json({ message: 'Gabim gjatÃ« marrjes sÃ« produkteve nga databaza', error: error.message });
    }

    // Kthe tÃ« dhÃ«nat e marra nga Supabase
    res.json(data);

  } catch (err) {
    // NÃ«se ka gabim tÃ« papritur nÃ« server
    console.error('Server error (GET all):', err);
    res.status(500).json({ message: 'Gabim i papritur nÃ« server', error: err.message });
  }
});

// GET /api/products/:id - Merr njÃ« produkt specifik nga Supabase me ID
app.get('/api/products/:id', async (req, res) => {
  try {
    const productId = parseInt(req.params.id); // Merr ID nga parametrat e URL-sÃ«

    // Kontrollo nÃ«se ID Ã«shtÃ« numÃ«r i vlefshÃ«m
    if (isNaN(productId)) {
        return res.status(400).json({ message: 'ID e produktit duhet tÃ« jetÃ« numÃ«r' });
    }

    const { data, error } = await supabase
      .from('products')
      .select('*')
      .eq('id', productId) // Filtro sipas kolonÃ«s 'id'
      .single(); // Kthen njÃ« objekt tÃ« vetÃ«m ose null (dhe error nÃ«se gjenden mÃ« shumÃ« se 1)

    if (error) {
      // Trajto gabimin specifik "Not Found" (PGRST116) nga .single()
      if (error.code === 'PGRST116') {
        return res.status(404).json({ message: 'Produkti nuk u gjet' });
      }
      // PÃ«r gabime tÃ« tjera Supabase
      console.error(`Supabase error (GET /${productId}):`, error);
      return res.status(500).json({ message: 'Gabim gjatÃ« marrjes sÃ« produktit nga databaza', error: error.message });
    }

    // NÃ«se 'data' Ã«shtÃ« null (edhe pse .single() duhet ta trajtonte me error PGRST116), kthe 404
    if (!data) {
        return res.status(404).json({ message: 'Produkti nuk u gjet' });
    }

    // Kthe produktin e gjetur
    res.json(data);

  } catch (err) {
    console.error('Server error (GET /:id):', err);
    res.status(500).json({ message: 'Gabim i papritur nÃ« server', error: err.message });
  }
});

// POST /api/products - Shton njÃ« produkt tÃ« ri nÃ« Supabase
app.post('/api/products', async (req, res) => {
  try {
    const { name, price, description } = req.body;

    // Validim bazik i inputit
    if (!name || price === undefined) {
      return res.status(400).json({ message: 'Emri (name) dhe Ã‡mimi (price) janÃ« tÃ« detyrueshÃ«m' });
    }
    if (typeof price !== 'number' || price < 0) {
      return res.status(400).json({ message: 'Ã‡mimi (price) duhet tÃ« jetÃ« numÃ«r pozitiv' });
    }

    const { data, error } = await supabase
      .from('products')
      .insert([
        {
          name: name,
          price: price,
          description: description || null // Vendos null nÃ«se description nuk jepet
        }
      ])
      .select() // Kthen rreshtin/rreshtat e shtuar
      .single(); // Presim vetÃ«m njÃ« rresht tÃ« shtuar

    if (error) {
      console.error('Supabase error (POST):', error);
      return res.status(500).json({ message: 'Gabim gjatÃ« shtimit tÃ« produktit nÃ« databazÃ«', error: error.message });
    }

    // Kthe produktin e ri tÃ« krijuar me status 201 (Created)
    res.status(201).json(data);

  } catch (err) {
    console.error('Server error (POST):', err);
    res.status(500).json({ message: 'Gabim i papritur nÃ« server', error: err.message });
  }
});

// PUT /api/products/:id - PÃ«rditÃ«son njÃ« produkt ekzistues nÃ« Supabase
app.put('/api/products/:id', async (req, res) => {
  try {
    const productId = parseInt(req.params.id);
    const { name, price, description } = req.body;

    if (isNaN(productId)) {
        return res.status(400).json({ message: 'ID e produktit duhet tÃ« jetÃ« numÃ«r' });
    }

    // Validim bazik - tÃ« paktÃ«n njÃ« fushÃ« duhet tÃ« jepet pÃ«r pÃ«rditÃ«sim
    if (name === undefined && price === undefined && description === undefined) {
        return res.status(400).json({ message: 'Duhet tÃ« specifikoni tÃ« paktÃ«n njÃ« fushÃ« pÃ«r tÃ« pÃ«rditÃ«suar (name, price, description)' });
    }
    // Validim shtesÃ« pÃ«r tipin e tÃ« dhÃ«nave nÃ«se jepen
    if (price !== undefined && (typeof price !== 'number' || price < 0)) {
        return res.status(400).json({ message: 'NÃ«se jepet, Ã‡mimi (price) duhet tÃ« jetÃ« numÃ«r pozitiv' });
    }

    // NdÃ«rto objektin me tÃ« dhÃ«nat pÃ«r pÃ«rditÃ«sim (vetÃ«m fushat qÃ« janÃ« dhÃ«nÃ«)
    const updateData = {};
    if (name !== undefined) updateData.name = name;
    if (price !== undefined) updateData.price = price;
    if (description !== undefined) updateData.description = description;

    const { data, error } = await supabase
      .from('products')
      .update(updateData) // PÃ«rditÃ«so vetÃ«m fushat e dhÃ«na
      .eq('id', productId)
      .select() // Kthe rreshtin/rreshtat e pÃ«rditÃ«suar
      .single(); // Presim vetÃ«m njÃ« rresht tÃ« pÃ«rditÃ«suar

    if (error) {
       // Trajto gabimin specifik "Not Found" (PGRST116) nga .single() nÃ« rast se update nuk gjeti rreshtin
      if (error.code === 'PGRST116') {
        return res.status(404).json({ message: 'Produkti nuk u gjet pÃ«r pÃ«rditÃ«sim' });
      }
      console.error(`Supabase error (PUT /${productId}):`, error);
      return res.status(500).json({ message: 'Gabim gjatÃ« pÃ«rditÃ«simit tÃ« produktit nÃ« databazÃ«', error: error.message });
    }

    // Kthe produktin e pÃ«rditÃ«suar
    res.json(data);

  } catch (err) {
    console.error('Server error (PUT /:id):', err);
    res.status(500).json({ message: 'Gabim i papritur nÃ« server', error: err.message });
  }
});

// DELETE /api/products/:id - Fshin njÃ« produkt nga Supabase
app.delete('/api/products/:id', async (req, res) => {
  try {
    const productId = parseInt(req.params.id);

    if (isNaN(productId)) {
        return res.status(400).json({ message: 'ID e produktit duhet tÃ« jetÃ« numÃ«r' });
    }

    // Opsionale: Mund tÃ« kontrollosh nÃ«se produkti ekziston para se ta fshish
    // por .delete() nÃ« Supabase nuk kthen error nÃ«se nuk gjen rreshtin pÃ«r tÃ« fshirÃ« (thjesht nuk bÃ«n gjÃ«).
    // MegjithatÃ«, Ã«shtÃ« praktikÃ« e mirÃ« REST tÃ« kthesh 404 nÃ«se ID nuk ekziston.
    // Le tÃ« pÃ«rdorim metodÃ«n `delete` dhe tÃ« shohim nÃ«se kthen ndonjÃ« tÃ« dhÃ«nÃ« ose count.
    // Update: Metoda delete kthen { data, error, count }. `count` tregon sa rreshta u fshinÃ«.

    const { data, error, count } = await supabase
      .from('products')
      .delete()
      .eq('id', productId); // Fshij rreshtin me kÃ«tÃ« ID

    if (error) {
      console.error(`Supabase error (DELETE /${productId}):`, error);
      return res.status(500).json({ message: 'Gabim gjatÃ« fshirjes sÃ« produktit nga databaza', error: error.message });
    }

    // Kontrollo nÃ«se ndonjÃ« rresht u fshi (count varet nga versioni i Supabase client, por zakonisht funksionon)
    // NÃ«se `count` nuk Ã«shtÃ« i disponueshÃ«m ose 0, do tÃ« thotÃ« se produkti nuk u gjet.
    if (count === 0 || count === null) { // count mund tÃ« jetÃ« null nÃ«se RLS e ndalon ose nuk u gjet asgjÃ«
         return res.status(404).json({ message: 'Produkti nuk u gjet pÃ«r t\'u fshirÃ«' });
    }


    // Kthe status 204 (No Content) pÃ«r tÃ« treguar sukses nÃ« fshirje
    res.status(204).send();

  } catch (err) {
    console.error('Server error (DELETE /:id):', err);
    res.status(500).json({ message: 'Gabim i papritur nÃ« server', error: err.message });
  }
});

// Starto serverin
app.listen(port, () => {
  console.log(`ğŸš€ Serveri po dÃ«gjon nÃ« http://localhost:${port}`);
  console.log(`ğŸ”— Endpoint-et e API-t: http://localhost:${port}/api/products`);
});